name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package_variant: [ apt-android-7 ]

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Build APKs
        shell: bash {0}
        env:
          PACKAGE_VARIANT: ${{ matrix.package_variant }}  # 矩阵参数注入环境变量
        run: |
          exit_on_error() { echo "$1"; exit 1; }

          echo "Setting vars"

          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
              GITHUB_SHA="${{ github.event.pull_request.head.sha }}"  # 使用PR的最新提交哈希
          fi

          # 从build.gradle提取版本号并生成语义化版本
          CURRENT_VERSION_NAME_REGEX='\s+versionName "([^"]+)"$'
          CURRENT_VERSION_NAME="$(grep -m 1 -E "$CURRENT_VERSION_NAME_REGEX" ./app/build.gradle | sed -r "s/$CURRENT_VERSION_NAME_REGEX/\1/")"
          RELEASE_VERSION_NAME="v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}"
          
          # 允许构建元数据包含连字符（-）
          if ! printf "%s" "${RELEASE_VERSION_NAME/v/}" | grep -qP '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'; then
           exit_on_error "Invalid versionName '${RELEASE_VERSION_NAME/v/}'. Must follow SemVer 2.0.0."
          fi

          # 定义APK路径和命名规则
          APK_DIR_PATH="./app/build/outputs/apk/debug"
          APK_VERSION_TAG="$RELEASE_VERSION_NAME-$PACKAGE_VARIANT-github-debug"  # 直接使用Shell变量
          APK_BASENAME_PREFIX="termux-app_$APK_VERSION_TAG"

          # 将变量注入后续步骤
          echo "APK_DIR_PATH=$APK_DIR_PATH" >> $GITHUB_ENV
          echo "APK_VERSION_TAG=$APK_VERSION_TAG" >> $GITHUB_ENV
          echo "APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX" >> $GITHUB_ENV

          # 配置Gradle构建参数
          export TERMUX_APP_VERSION_NAME="${RELEASE_VERSION_NAME/v/}"
          export TERMUX_APK_VERSION_TAG="$APK_VERSION_TAG"
          export TERMUX_PACKAGE_VARIANT="$PACKAGE_VARIANT"  # 关键修正：直接使用Shell变量

          echo "Building APKs for $APK_VERSION_TAG"
          if ! ./gradlew assembleDebug; then
            exit_on_error "Build failed for '$APK_VERSION_TAG'."
          fi

          # 验证所有ABI的APK文件存在
          echo "Validating APKs"
          for abi in universal arm64-v8a armeabi-v7a x86_64 x86; do
            if ! test -f "$APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk"; then
              files_found="$(ls "$APK_DIR_PATH")"
              exit_on_error "Missing APK: $APK_DIR_PATH/${APK_BASENAME_PREFIX}_$abi.apk\nFound: $files_found"
            fi
          done

          # 生成SHA256校验文件
          echo "Generating sha256sums"
          (cd "$APK_DIR_PATH" && sha256sum \
            "${APK_BASENAME_PREFIX}_universal.apk" \
            "${APK_BASENAME_PREFIX}_arm64-v8a.apk" \
            "${APK_BASENAME_PREFIX}_armeabi-v7a.apk" \
            "${APK_BASENAME_PREFIX}_x86_64.apk" \
            "${APK_BASENAME_PREFIX}_x86.apk" \
            > "${APK_BASENAME_PREFIX}_sha256sums") || exit_on_error "Failed to generate checksums."

      # 以下为文件上传步骤，无需修改
      - name: Attach universal APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_universal
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_universal.apk
            ${{ env.APK_DIR_PATH }}/output-metadata.json

      - name: Attach arm64-v8a APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_arm64-v8a
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_arm64-v8a.apk
            ${{ env.APK_DIR_PATH }}/output-metadata.json

      - name: Attach armeabi-v7a APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_armeabi-v7a
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_armeabi-v7a.apk
            ${{ env.APK_DIR_PATH }}/output-metadata.json

      - name: Attach x86_64 APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_x86_64
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_x86_64.apk
            ${{ env.APK_DIR_PATH }}/output-metadata.json

      - name: Attach x86 APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_x86
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_x86.apk
            ${{ env.APK_DIR_PATH }}/output-metadata.json

      - name: Attach checksums
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}_sha256sums
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}_sha256sums
            ${{ env.APK_DIR_PATH }}/output-metadata.json
